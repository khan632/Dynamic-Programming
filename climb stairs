package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String [] arg){
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        System.out.println(climbStair1(n));
        System.out.println(climbStair2(n, new int [n + 1]));
          System.out.println(climbStair3(n));
    }
=========================================================================================================================================================
          //SIMPLE RECURSIVE FUNCTIONS//
    public static int climbStair1(int n){
        if(n == 0){
            return 1;
        }
        if(n < 1){
            return 0;
        }
        int nMinus1 = climbStair(n - 1);
        int nMinus2 = climbStair(n - 2);
        int nMinu3 = climbStair(n - 3);

        int ans = nMinus1 + nMinus2 + nMinu3;
        return ans;
    }
==========================================================================================================================================================================
     //MEMORIZATION METHOD
     
     public static int climbStair2(int n, int [] dp){
    if(n == 0){
        return 1;
    }
    if(n < 1){
        return 0;
    }
    if(dp[n] != 0){
        return dp[n];
    }
    int nMinus1 = climbStair2(n - 1, dp);
    int nMinus2 = climbStair2(n - 2, dp);
    int nMinu3 = climbStair2(n - 3, dp);

    int ans = nMinus1 + nMinus2 + nMinu3;
    dp[n] = ans;
    return ans;
}
===============================================================================================================================================================================
                                                  //TABULATION METHOD

public static int climbStair3(int n){
        int [] dp = new int [n + 1];
        if(n == 0){
            return 1;
        }
        if(n < 1){
            return 0;
        }
        dp[0] = 1;
        for(int i = 1; i <= n; i++){
            if(i ==1){
                dp[i] = dp[i - 1];
            }else if (i == 2){
                dp[i] = dp[i - 1] + dp[i - 2];
            }else{
                dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
            }
        }
         return dp[n];
    }
  }  
