 public static void main(String [] arg){
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int [][] arr = new int[n][m];

        for(int i = 0; i < n; i++){
            for (int j = 0; j < m; j++) {
                arr[i][j] = scn.nextInt();
            }
        }
  ===============================================================      
        System.out.println(pathWithMaxGold1(arr, n, m));
   ===========================================================     
        int [][] dp = new int[n][m];
        int MaxAns = 0;
        for(int i = 0; i < arr.length; i++){
            MaxAns = Math.max(MaxAns, pathWithMaxGold(arr, i, 0, dp));
        }
        System.out.println(MaxAns);
    }
========================================================================================================================
                            //TABULATION METHOD//
    public static int pathWithMaxGold1(int [][] arr, int n, int m){

        int[][] dp = new int[n][m];

        for (int j = m - 1; j >= 0; j--){
            for (int i = n - 1; i >= 0; i--){
                if(j == m - 1){
                    dp[i][j] = arr[i][j];
                }else if (i == 0){
                    dp[i][j] = arr[i][j] + Math.max(dp[i + 1][j + 1], dp[i][j + 1]);
                }else if (i == n - 1){
                    dp[i][j] = arr[i][j] + Math.max(dp[i - 1][j + 1], dp[i][j + 1]);
                }else{
                    dp[i][j] = arr[i][j] + Math.max(dp[i - 1][j + 1], Math.max(dp[i][j + 1], dp[i + 1][j + 1]));
                }
            }
        }

        int max = dp[0][0];
        for(int i = 0; i < dp.length-1; i++){
            if (max < dp[i][0]){
                max = dp[i][0];
            }
        }
        return max;
    }
  }
==========================================================================================================================================
                            //MEMORIZATION METHOD//
                            
public static int pathWithMaxGold(int [][] arr, int n, int m, int [][] dp){
        if(n < 0 || n >= arr.length){
            //-ve base case
            return 0;
        }
        if(m == arr[0].length - 1){
            //+ve base case
            return arr[n][m];
        }
        if(dp[n][m] != 0){
            //memorization step
            return dp[n][m];
        }

        int ans1 = pathWithMaxGold(arr, n - 1, m + 1, dp);
        int ans2 = pathWithMaxGold(arr, n, m + 1, dp);
        int ans3 = pathWithMaxGold(arr, n + 1, m + 1, dp);
            int mainAns = arr[n][m] + Math.max(ans3, Math.max(ans1, ans2));

         dp[n][m] = mainAns;

          return mainAns;
        }
   }
